#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  # for tag in all_tags
  #   @items << Nanoc::Item.new("", 
  #       {:title => tag.capitalize, :tag => tag, :layout => "tag", :extension => 'html'},
  #        "/blog/tags/#{tag.to_url}/")
  # end

  for date in get_timeline
    # @items << Nanoc::Item.new("", {
    #           :title => "Blog posts from #{date.year}", 
    #           :menu_title => date.year, :year => date.year, 
    #           :layout => "timeline", 
    #           :extension => "html"}, "/blog/#{date.year}/")
    @items.create("", {
              :title => "Blog posts from #{Date::MONTHNAMES[date.month.to_i]} #{date.year}", 
              :menu_title => Date::MONTHNAMES[date.month.to_i], 
              :year => date.year, 
              :month => date.month, 
              :layout => "timeline", 
              :extension => "html"}, "/blog/#{date.year}/#{'%02d' % date.month}")
  end

end

compile '/stylesheet/' do
  # don’t filter or layout
end

compile '/posts/*' do
  filter :kramdown
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout 'post'
end

compile '/tags/*' do
  filter :kramdown
  layout 'tag'
end

compile %r{/blog/(\d\d\d\d)/(\d\d)/*} do
  filter :kramdown
  layout 'timeperiod'
end

compile '/js/*/' do
  nil
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    layout 'default'
  end
end

route '/js/*/' do
    item.identifier.chop + ".js"
end

route '/stylesheet/' do
  '/style.css'
end

route '/tags/*' do
  slug = /tags\/([^\/]+)/
    .match(item.identifier).captures[0]

    "/blog/tags/#{slug}/index.html"
end

route '/posts/*' do
  y,m,d,slug = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/
    .match(item.identifier).captures

  "/#{y}/#{m}/#{slug}/index.html"
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb

